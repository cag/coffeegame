// Generated by CoffeeScript 1.9.3
(function() {
  define(['jquery'], function($) {
    var url_prefix, url_suffix;
    url_prefix = 'assets/';
    url_suffix = '.json';
    return {
      Sprite: (function() {
        function _Class(name1, onload) {
          var cb_target;
          this.name = name1;
          this.loaded = false;
          cb_target = this;
          $.getJSON(url_prefix + this.name + url_suffix, function(data) {
            var e;
            try {
              cb_target.load(data, onload);
            } catch (_error) {
              e = _error;
              throw 'could not load sprite ' + url_prefix + cb_target.name + url_suffix;
            }
          });
          return;
        }

        _Class.prototype.load = function(json_data, onload) {
          var animation, animations, duration, frame, frames, i, image, len, name, offset, ref, sprite;
          offset = json_data.offset, frames = json_data.frames, animations = json_data.animations;
          for (name in animations) {
            animation = animations[name];
            duration = 0;
            ref = animation.frames;
            for (i = 0, len = ref.length; i < len; i++) {
              frame = ref[i];
              duration += frame[1];
            }
            animations[name].duration = duration;
          }
          this.animations = animations;
          sprite = this;
          image = new Image();
          image.onload = function() {
            sprite.setupFrames(image, offset, frames);
            this.loaded = true;
            if (typeof onload === "function") {
              onload();
            }
          };
          image.src = url_prefix + json_data.spritesheet;
        };

        _Class.prototype.setupFrames = function(img, offset, frames) {
          var frame, grabFrame;
          grabFrame = function(frame) {
            var fcanvas, fctx, fh, fw;
            fw = frame.size[0];
            fh = frame.size[1];
            fcanvas = document.createElement('canvas');
            fcanvas.width = fw;
            fcanvas.height = fh;
            fctx = fcanvas.getContext('2d');
            fctx.drawImage(img, offset[0] + frame.pos[0], offset[1] + frame.pos[1], fw, fh, 0, 0, fw, fh);
            return fcanvas;
          };
          this.frames = (function() {
            var i, len, results;
            results = [];
            for (i = 0, len = frames.length; i < len; i++) {
              frame = frames[i];
              results.push(grabFrame(frame));
            }
            return results;
          })();
          this.frame_offsets = (function() {
            var i, len, results;
            results = [];
            for (i = 0, len = frames.length; i < len; i++) {
              frame = frames[i];
              results.push(frame.offset);
            }
            return results;
          })();
        };

        _Class.prototype.startAnimation = function(anim_name, anim_speed) {
          if (anim_speed == null) {
            anim_speed = 1;
          }
          this.current_animation = this.animations[anim_name];
          this.animation_time = 0;
          this.animation_speed = anim_speed;
        };

        _Class.prototype.update = function(dt) {
          this.animation_time += dt * this.animation_speed;
        };

        _Class.prototype.draw = function(context, x, y, flip_h) {
          var anim_time, cur_anim, cur_anim_dur, frame, frame_hflipped, frame_img, frame_index, frame_offset, i, len, ref;
          cur_anim = this.current_animation;
          cur_anim_dur = cur_anim.duration;
          frame_index = -1;
          anim_time = this.animation_time;
          if (cur_anim.loop) {
            anim_time %= cur_anim_dur;
          } else if (anim_time > cur_anim_dur) {
            anim_time = cur_anim_dur;
          }
          ref = cur_anim.frames;
          for (i = 0, len = ref.length; i < len; i++) {
            frame = ref[i];
            anim_time -= frame[1];
            if (anim_time <= 0) {
              frame_index = frame[0];
              frame_hflipped = !!frame[2];
              break;
            }
          }
          frame_img = this.frames[frame_index];
          frame_offset = this.frame_offsets[frame_index];
          context.save();
          context.translate(Math.round(x), Math.round(y));
          if (!!flip_h !== frame_hflipped) {
            context.transform(-1, 0, 0, 1, 0, 0);
          }
          context.drawImage(frame_img, frame_offset[0], frame_offset[1]);
          context.restore();
        };

        return _Class;

      })()
    };
  });

}).call(this);
