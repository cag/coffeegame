// Generated by CoffeeScript 1.3.3
(function() {

  define(['./util', './input', './audio'], function(util, input, audio) {
    var canvas, canvas_h, canvas_w, context, current_scene, draw, dt_clamp, fixed_dt, handleKeyDown, handleKeyUp, inv_last_dt, last_dt, paused, update;
    canvas = null;
    context = null;
    canvas_w = 0;
    canvas_h = 0;
    current_scene = null;
    last_dt = null;
    inv_last_dt = null;
    fixed_dt = null;
    dt_clamp = 50;
    paused = true;
    handleKeyDown = function(event) {
      input.handleKeyDown(event.keyCode);
    };
    handleKeyUp = function(event) {
      input.handleKeyUp(event.keyCode);
    };
    update = function(dt) {
      input.update();
      current_scene.update(dt);
    };
    draw = function() {
      current_scene.draw(context);
    };
    return {
      width: function() {
        return canvas_w;
      },
      height: function() {
        return canvas_h;
      },
      lastDt: function() {
        return last_dt;
      },
      invLastDt: function() {
        return inv_last_dt;
      },
      switchScene: function(new_scene) {
        if (new_scene == null) {
          throw 'cannot switch to nonexistent scene';
        }
        current_scene.end();
        current_scene = new_scene;
        current_scene.start();
      },
      init: function(width, height, fdt, dtc, initial_scene) {
        current_scene = initial_scene;
        if (fdt != null) {
          fixed_dt = fdt;
          last_dt = fixed_dt;
          inv_last_dt = 1 / fixed_dt;
        } else if (dtc != null) {
          dt_clamp = dtc;
          last_dt = dt_clamp;
          inv_last_dt = 1 / dt_clamp;
        } else {
          last_dt = 1 / 60;
          inv_last_dt = 60;
        }
        canvas = document.createElement('canvas');
        canvas.width = canvas_w = width;
        canvas.height = canvas_h = height;
        canvas.tabIndex = 1;
        context = canvas.getContext('2d');
        document.body.appendChild(canvas);
        canvas.focus();
        input.init();
        canvas.addEventListener('keydown', handleKeyDown, false);
        canvas.addEventListener('keyup', handleKeyUp, false);
        audio.init();
      },
      run: function() {
        var dt_accumulator, gameLoop, last_frame, requestAnimationFrame, time;
        if (current_scene == null) {
          throw 'no current scene!';
        }
        requestAnimationFrame = window.requestAnimationFrame;
        time = util.time;
        last_frame = time();
        dt_accumulator = 0;
        paused = false;
        gameLoop = function() {
          var dt, now;
          if (!paused) {
            requestAnimationFrame(gameLoop);
          }
          now = time();
          dt = now - last_frame;
          dt = dt > dt_clamp ? dt_clamp : dt;
          last_frame = now;
          if (fixed_dt != null) {
            dt_accumulator += dt;
            while (dt_accumulator > fixed_dt) {
              update(fixed_dt);
              dt_accumulator -= fixed_dt;
            }
          } else {
            update(dt);
            last_dt = dt;
            inv_last_dt = 1 / dt;
          }
          return draw();
        };
        current_scene.start();
        gameLoop();
      }
    };
  });

}).call(this);
