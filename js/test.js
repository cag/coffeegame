// Generated by CoffeeScript 1.3.3
(function() {

  define(['./util', './input', './game', './geometry', './entity', './physics'], function(util, input, game, geometry, entity, physics) {
    var handleLayerObs, test_sound, test_sprite;
    test_sprite = null;
    test_sound = null;
    handleLayerObs = function(other, info) {};
    return {
      setTestSprite: function(sprite) {
        test_sprite = sprite;
      },
      setTestSound: function(sound) {
        test_sound = sound;
      },
      handlePlayerStart: function(player) {
        var Aabb, Entity, constructBitmask, dotProduct, testPlayer;
        Entity = entity.Entity;
        Aabb = geometry.Aabb, dotProduct = geometry.dotProduct;
        constructBitmask = util.constructBitmask;
        testPlayer = new Entity(player.x, player.y, new Aabb([4, 4]));
        testPlayer.obstructs = constructBitmask([0]);
        testPlayer.collides = constructBitmask([0]);
        testPlayer.damping = .99;
        testPlayer.last_x = testPlayer.x;
        testPlayer.last_y = testPlayer.y;
        testPlayer.update = function(dt) {
          var accel, h_accel, v;
          accel = [0, 0];
          if (this.grounded) {
            if (input.jump.pressed) {
              this.damping = .995;
              h_accel = 100;
              v = physics.getVelocity(this, dt);
              v[1] = -200;
              physics.setVelocity(this, v, dt);
              this.grounded = false;
              test_sound.play();
            } else {
              this.damping = .5;
              h_accel = 2000;
            }
          } else {
            if (this.last_y > this.y && input.jump.released) {
              this.last_y = .5 * (this.last_y - this.y) + this.y;
            }
            this.damping = .995;
            h_accel = 100;
          }
          if (input.left.state) {
            accel[0] -= h_accel;
          }
          if (input.right.state) {
            accel[0] += h_accel;
          }
          if (this.grounded && (dotProduct(this.ground_normal, accel)) < 0) {
            accel[1] -= accel[0] * this.ground_normal[0] / this.ground_normal[1];
          }
          if (!this.grounded || accel[0] !== 0 || Math.abs(this.last_x - this.x) >= 1) {
            accel[1] += 400;
            this.grounded = false;
          }
          this.acceleration = accel;
          physics.integrate(this, dt);
        };
        testPlayer.onObstruct = function(other, info) {
          var normal;
          normal = info[1];
          if (normal[1] >= Math.abs(normal[0])) {
            this.grounded = true;
            this.ground_normal = normal;
          }
        };
        test_sprite.startAnimation('walk');
        testPlayer.sprite = test_sprite;
        testPlayer.draw = function(context, xoff, yoff) {
          this.sprite.draw(context, this.x + xoff, this.y + yoff, true);
        };
        player.layer.addEntity(testPlayer);
        player.map.camera.update = function(dt) {
          this.x = testPlayer.x;
          this.y = testPlayer.y;
        };
      },
      handleLayerObs: handleLayerObs,
      handleObs1: function(other, info) {
        handleLayerObs(other, info);
      },
      handleZoneCollide: function(other, info) {},
      handleZone1Collide: function(other, info) {},
      handleLayerStart: function(layer) {}
    };
  });

}).call(this);
